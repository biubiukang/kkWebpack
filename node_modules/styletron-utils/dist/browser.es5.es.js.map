{"version":3,"file":"browser.es5.es.js","sources":["../src/hyphenate-style-name.js","../src/inject-style.js","../src/inject-style-prefixed.js"],"sourcesContent":["const uppercasePattern = /[A-Z]/g;\nconst msPattern = /^ms-/;\nconst cache = {};\n\nexport default function hyphenateStyleName(prop) {\n  return prop in cache\n    ? cache[prop]\n    : (cache[prop] = prop\n        .replace(uppercasePattern, '-$&')\n        .toLowerCase()\n        .replace(msPattern, '-ms-'));\n}\n","import hyphenate from './hyphenate-style-name';\n\nexport default function injectStyle(styletron, styles, media, pseudo) {\n  let classString = '';\n  for (const key in styles) {\n    const val = styles[key];\n    const valType = typeof val;\n    if (valType === 'string' || valType === 'number') {\n      classString +=\n        ' ' +\n        styletron.injectRawDeclaration({\n          block: `${hyphenate(key)}:${val}`,\n          media,\n          pseudo,\n        });\n      continue;\n    }\n    if (Array.isArray(val)) {\n      if (val.length === 0) {\n        continue;\n      }\n      const hyphenated = hyphenate(key);\n      let block = `${hyphenated}:${val[0]}`;\n      for (let i = 1; i < val.length; i++) {\n        block += `;${hyphenated}:${val[i]}`;\n      }\n      classString +=\n        ' ' +\n        styletron.injectRawDeclaration({\n          block,\n          media,\n          pseudo,\n        });\n      continue;\n    }\n    if (valType === 'object') {\n      if (key[0] === ':') {\n        classString += ' ' + injectStyle(styletron, val, media, key);\n        continue;\n      }\n      if (key.substring(0, 6) === '@media') {\n        classString += ' ' + injectStyle(styletron, val, key.substr(7), pseudo);\n        continue;\n      }\n    }\n  }\n  // remove leading space on way out\n  return classString.slice(1);\n}\n","import hyphenate from './hyphenate-style-name';\nimport prefixAll from 'inline-style-prefixer/static';\n\nconst prefixedBlockCache = {};\n\nexport default function injectStylePrefixed(\n  styletron,\n  styles,\n  media,\n  pseudo,\n  cache = prefixedBlockCache\n) {\n  let classString = '';\n  for (const originalKey in styles) {\n    const originalVal = styles[originalKey];\n    const originalValType = typeof originalVal;\n    const isPrimitiveVal =\n      originalValType === 'string' || originalValType === 'number';\n    if (isPrimitiveVal || Array.isArray(originalVal)) {\n      let block = '';\n      if (\n        isPrimitiveVal &&\n        cache.hasOwnProperty(originalKey) &&\n        cache[originalKey].hasOwnProperty(originalVal)\n      ) {\n        block = cache[originalKey][originalVal];\n      } else {\n        const prefixed = prefixAll({[originalKey]: originalVal});\n        for (const prefixedKey in prefixed) {\n          const prefixedVal = prefixed[prefixedKey];\n          const prefixedValType = typeof prefixedVal;\n          if (prefixedValType === 'string' || prefixedValType === 'number') {\n            block += `${hyphenate(prefixedKey)}:${prefixedVal};`;\n            continue;\n          }\n          if (Array.isArray(prefixedVal)) {\n            const hyphenated = hyphenate(prefixedKey);\n            for (let i = 0; i < prefixedVal.length; i++) {\n              block += `${hyphenated}:${prefixedVal[i]};`;\n            }\n            continue;\n          }\n        }\n        block = block.slice(0, -1); // Remove trailing semicolon\n        if (isPrimitiveVal) {\n          if (!cache.hasOwnProperty(originalKey)) {\n            cache[originalKey] = {};\n          }\n          cache[originalKey][originalVal] = block;\n        }\n      }\n      classString +=\n        ' ' +\n        styletron.injectRawDeclaration({\n          block,\n          media,\n          pseudo,\n        });\n    }\n    if (originalValType === 'object') {\n      if (originalKey[0] === ':') {\n        classString +=\n          ' ' +\n          injectStylePrefixed(\n            styletron,\n            originalVal,\n            media,\n            originalKey,\n            cache\n          );\n        continue;\n      }\n      if (originalKey.substring(0, 6) === '@media') {\n        classString +=\n          ' ' +\n          injectStylePrefixed(\n            styletron,\n            originalVal,\n            originalKey.substr(7),\n            pseudo,\n            cache\n          );\n        continue;\n      }\n    }\n  }\n  // remove leading space on way out\n  return classString.slice(1);\n}\n"],"names":["uppercasePattern","msPattern","cache","hyphenateStyleName","prop","replace","toLowerCase","injectStyle","styletron","styles","media","pseudo","classString","key","val","valType","injectRawDeclaration","hyphenate","Array","isArray","length","hyphenated","block","i","substring","substr","slice","prefixedBlockCache","injectStylePrefixed","originalKey","originalVal","originalValType","isPrimitiveVal","hasOwnProperty","prefixed","prefixAll","prefixedKey","prefixedVal","prefixedValType"],"mappings":"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"}