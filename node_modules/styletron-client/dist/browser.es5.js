'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var StyletronCore = _interopDefault(require('styletron-core'));

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/* eslint-env browser */
var DECL_REGEX = /.([^:{]+)(:[^{]+)?{([^}]+)}/g;
/**
 * A Styletron class for rendering styles in the browser
 * @extends StyletronCore
 * @packagename styletron-client
 * @example
 * const elements = document.getElementsByClassName('_styletron_hydrate_');
 * const styletron = new StyletronClient(elements);
 */

var StyletronClient =
/*#__PURE__*/
function (_StyletronCore) {
  _inheritsLoose(StyletronClient, _StyletronCore);

  /**
   * Create a new StyletronClient instance
   * @param {NodeList|HTMLCollection|HTMLStyleElement[]} [serverStyles] - List of server style elements
   * @param {object} [opts] - StyletronCore options
   */
  function StyletronClient(serverStyles, opts) {
    var _this;

    _this = _StyletronCore.call(this, opts) || this;
    _this.uniqueCount = 0;
    _this.mediaSheets = {};

    if (serverStyles && serverStyles.length > 0) {
      for (var i = 0; i < serverStyles.length; i++) {
        var element = serverStyles[i];

        if (element.media) {
          _this.mediaSheets[element.media] = element;
        } else {
          _this.mainSheet = element;
        }

        _this.hydrateCacheFromCssString(element.textContent, element.media);
      }
    } else {
      var styleSheet = document.createElement('style');
      document.head.appendChild(styleSheet);
      _this.mainSheet = styleSheet;
    }

    return _this;
  }
  /*
   * Hydrate the cache from a css string and media string
   * @param {string} css   - The stylesheet css content
   * @param {string} media - The stylesheet media string
   */


  var _proto = StyletronClient.prototype;

  _proto.hydrateCacheFromCssString = function hydrateCacheFromCssString(css, media) {
    var decl; // {
    //  1: className,
    //  2: pseudo,
    //  3: block,
    // }

    while (decl = DECL_REGEX.exec(css)) {
      _StyletronCore.prototype.incrementVirtualCount.call(this);

      StyletronCore.assignDecl(this.cache, {
        block: decl[3],
        pseudo: decl[2],
        media: media
      }, decl[1]);
    }
  };
  /**
   * Inject declaration into the stylesheet and return the unique class name
   * @return {string}      class name
   * @example
   * // <style id="styletron">.a{color:red}</style>
   * const styletron = new StyletronClient(document.getElementsByClassName('_styletron_hydrate_'));
   * styletron.injectDeclaration({prop: 'color', val: 'blue'});
   * // → 'b'
   * styletron.injectDeclaration({prop: 'color', val: 'red', media: '(min-width: 800px)'});
   * // → 'c'
   * styletron.injectDeclaration({prop: 'color', val: 'red'});
   * // → 'a'
   */


  _proto.injectDeclaration = function injectDeclaration(_ref) {
    var prop = _ref.prop,
        val = _ref.val,
        media = _ref.media,
        pseudo = _ref.pseudo;
    return this.injectRawDeclaration({
      block: prop + ":" + val,
      media: media,
      pseudo: pseudo
    });
  };
  /**
   * Inject raw declaration into the stylesheet and return the unique class name
   * @return {string}      class name
   * @example
   * // <style id="styletron">.a{color:red}</style>
   * const styletron = new StyletronClient(document.getElementsByClassName('_styletron_hydrate_'));
   * styletron.injectRawDeclaration({block: 'color:blue'});
   * // → 'b'
   * styletron.injectRawDeclaration({block: 'color:red', media: '(min-width: 800px)'});
   * // → 'c'
   * styletron.injectRawDeclaration({block: 'color:red'});
   * // → 'a'
   */


  _proto.injectRawDeclaration = function injectRawDeclaration(decl) {
    var oldCount = this.uniqueCount;

    var className = _StyletronCore.prototype.injectRawDeclaration.call(this, decl);

    if (oldCount !== this.uniqueCount) {
      var rule = declarationToRule(className, decl);
      var sheet;

      if (decl.media) {
        if (!this.mediaSheets[decl.media]) {
          var mediaSheet = document.createElement('style');
          mediaSheet.media = decl.media;
          this.mediaSheets[decl.media] = mediaSheet;
          this.mainSheet.parentNode.appendChild(mediaSheet);
        }

        sheet = this.mediaSheets[decl.media].sheet;
      } else {
        sheet = this.mainSheet.sheet;
      }

      sheet.insertRule(rule, sheet.cssRules.length);
    }

    return className;
  };

  return StyletronClient;
}(StyletronCore);

/*
 * Injection helpers
 */

function declarationToRule(className, _ref2) {
  var block = _ref2.block,
      pseudo = _ref2.pseudo;
  var selector = "." + className;

  if (pseudo) {
    selector += pseudo;
  }

  return selector + "{" + block + "}";
}

module.exports = StyletronClient;
//# sourceMappingURL=browser.es5.js.map
