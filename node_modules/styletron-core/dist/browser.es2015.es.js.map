{"version":3,"file":"browser.es2015.es.js","sources":["../src/index.js"],"sourcesContent":["/**\n * The core styletron module\n * @packagename styletron-core\n */\nclass StyletronCore {\n  /**\n   * Create a new StyletronCore instance\n   * @param {object} [opts]           An object containing options\n   * @param {string} [opts.prefix=''] A prefix for generated CSS class names\n   */\n  constructor({prefix = ''} = {}) {\n    this.cache = {\n      media: {},\n      pseudo: {},\n    };\n    this.prefix = prefix === '' ? false : prefix;\n    this.uniqueCount = 0;\n    this.offset = 10; // skip 0-9\n    this.msb = 35;\n    this.power = 1;\n  }\n\n  static assignDecl(target, decl, className) {\n    const {block, media, pseudo} = decl;\n    let targetEntry;\n    if (media) {\n      if (!target.media[media]) {\n        target.media[media] = {pseudo: {}};\n      }\n      targetEntry = target.media[media];\n    } else {\n      targetEntry = target;\n    }\n    if (pseudo) {\n      if (!targetEntry.pseudo[pseudo]) {\n        targetEntry.pseudo[pseudo] = {};\n      }\n      targetEntry = targetEntry.pseudo[pseudo];\n    }\n    targetEntry[block] = className;\n  }\n\n  /**\n   * Injects a declaration (if not already injected) and returns a class name\n   * @param  {object} decl          The CSS declaration object\n   * @param  {string} decl.prop     The property name\n   * @param  {string} decl.val      The property value\n   * @param  {string} [decl.media]  The media query\n   * @param  {string} [decl.pseudo] The pseudo selector\n   * @return {string|undefined}     The class name for the declaration\n   */\n  injectDeclaration({prop, val, media, pseudo}) {\n    return this.injectRawDeclaration({block: `${prop}:${val}`, media, pseudo});\n  }\n\n  /**\n   * Injects a raw declaration (if not already injected) and returns a class name\n   * @param  {object} decl          The CSS declaration object\n   * @param  {string} decl.block    The declaration block\n   * @param  {string} [decl.media]  The media query\n   * @param  {string} [decl.pseudo] The pseudo selector\n   * @return {string|undefined}     The class name for the declaration\n   */\n  injectRawDeclaration(decl) {\n    const cached = this.getCachedDeclaration(decl);\n    if (cached) {\n      return cached;\n    }\n    const virtualCount = this.incrementVirtualCount();\n    const hash = virtualCount.toString(36);\n    const className = this.prefix ? this.prefix + hash : hash;\n    StyletronCore.assignDecl(this.cache, decl, className);\n    return className;\n  }\n\n  /**\n   * Get the next virtual class number, while setting\n   * the uniqueCount, offset, and msb counters appropriately.\n   * @return {number} The virtual class count\n   * @private\n   */\n  incrementVirtualCount() {\n    const virtualCount = this.uniqueCount + this.offset;\n    if (virtualCount === this.msb) {\n      this.offset += (this.msb + 1) * 9;\n      this.msb = Math.pow(36, ++this.power) - 1;\n    }\n    this.uniqueCount++;\n    return virtualCount;\n  }\n\n  /**\n   * Gets the class name for an already injected declaration\n   * @param  {object} decl          The CSS declaration object\n   * @param  {string} decl.block    The declaration block\n   * @param  {string} [decl.media]  The media query\n   * @param  {string} [decl.pseudo] The pseudo selector\n   * @return {string|undefined}     The class name for the declaration\n   * @private\n   */\n  getCachedDeclaration({block, media, pseudo}) {\n    let entry;\n    if (media) {\n      entry = this.cache.media[media];\n      if (!entry) {\n        return false;\n      }\n    } else {\n      entry = this.cache;\n    }\n    if (pseudo) {\n      entry = entry.pseudo[pseudo];\n      if (!entry) {\n        return false;\n      }\n    }\n    return entry[block];\n  }\n}\n\nexport default StyletronCore;\n"],"names":["StyletronCore","cache","prefix","uniqueCount","offset","msb","power","assignDecl","target","decl","className","targetEntry","media","pseudo","block","injectRawDeclaration","prop","val","cached","getCachedDeclaration","virtualCount","incrementVirtualCount","hash","toString","Math","pow","entry"],"mappings":"AAAA;;;;AAIA,MAAMA,aAAN,CAAoB;;;;;;cAMN;aAAU;MAAM,EAA5B,EAAgC;SACzBC,KAAL,GAAa;aACJ,EADI;cAEH;KAFV;SAIKC,MAAL,GAAcA,WAAW,EAAX,GAAgB,KAAhB,GAAwBA,MAAtC;SACKC,WAAL,GAAmB,CAAnB;SACKC,MAAL,GAAc,EAAd,CAP8B;;SAQzBC,GAAL,GAAW,EAAX;SACKC,KAAL,GAAa,CAAb;;;SAGKC,UAAP,CAAkBC,MAAlB,EAA0BC,IAA1B,EAAgCC,SAAhC,EAA2C;UACnC;WAAA;WAAA;;QAAyBD,IAA/B;QACIE,WAAJ;;QACIC,KAAJ,EAAW;UACL,CAACJ,OAAOI,KAAP,CAAaA,KAAb,CAAL,EAA0B;eACjBA,KAAP,CAAaA,KAAb,IAAsB;kBAAS;SAA/B;;;oBAEYJ,OAAOI,KAAP,CAAaA,KAAb,CAAd;KAJF,MAKO;oBACSJ,MAAd;;;QAEEK,MAAJ,EAAY;UACN,CAACF,YAAYE,MAAZ,CAAmBA,MAAnB,CAAL,EAAiC;oBACnBA,MAAZ,CAAmBA,MAAnB,IAA6B,EAA7B;;;oBAEYF,YAAYE,MAAZ,CAAmBA,MAAnB,CAAd;;;gBAEUC,KAAZ,IAAqBJ,SAArB;;;;;;;;;;;;;oBAYgB;QAAA;OAAA;SAAA;;GAAlB,EAA8C;WACrC,KAAKK,oBAAL,CAA0B;aAAS,GAAEC,IAAK,IAAGC,GAAI,EAAvB;WAAA;;KAA1B,CAAP;;;;;;;;;;;;uBAWmBR,IAArB,EAA2B;UACnBS,SAAS,KAAKC,oBAAL,CAA0BV,IAA1B,CAAf;;QACIS,MAAJ,EAAY;aACHA,MAAP;;;UAEIE,eAAe,KAAKC,qBAAL,EAArB;UACMC,OAAOF,aAAaG,QAAb,CAAsB,EAAtB,CAAb;UACMb,YAAY,KAAKR,MAAL,GAAc,KAAKA,MAAL,GAAcoB,IAA5B,GAAmCA,IAArD;kBACcf,UAAd,CAAyB,KAAKN,KAA9B,EAAqCQ,IAArC,EAA2CC,SAA3C;WACOA,SAAP;;;;;;;;;;0BASsB;UAChBU,eAAe,KAAKjB,WAAL,GAAmB,KAAKC,MAA7C;;QACIgB,iBAAiB,KAAKf,GAA1B,EAA+B;WACxBD,MAAL,IAAe,CAAC,KAAKC,GAAL,GAAW,CAAZ,IAAiB,CAAhC;WACKA,GAAL,GAAWmB,KAAKC,GAAL,CAAS,EAAT,EAAa,EAAE,KAAKnB,KAApB,IAA6B,CAAxC;;;SAEGH,WAAL;WACOiB,YAAP;;;;;;;;;;;;;uBAYmB;SAAA;SAAA;;GAArB,EAA6C;QACvCM,KAAJ;;QACId,KAAJ,EAAW;cACD,KAAKX,KAAL,CAAWW,KAAX,CAAiBA,KAAjB,CAAR;;UACI,CAACc,KAAL,EAAY;eACH,KAAP;;KAHJ,MAKO;cACG,KAAKzB,KAAb;;;QAEEY,MAAJ,EAAY;cACFa,MAAMb,MAAN,CAAaA,MAAb,CAAR;;UACI,CAACa,KAAL,EAAY;eACH,KAAP;;;;WAGGA,MAAMZ,KAAN,CAAP;;;;;;;"}