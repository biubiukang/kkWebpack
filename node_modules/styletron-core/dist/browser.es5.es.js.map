{"version":3,"file":"browser.es5.es.js","sources":["../src/index.js"],"sourcesContent":["/**\n * The core styletron module\n * @packagename styletron-core\n */\nclass StyletronCore {\n  /**\n   * Create a new StyletronCore instance\n   * @param {object} [opts]           An object containing options\n   * @param {string} [opts.prefix=''] A prefix for generated CSS class names\n   */\n  constructor({prefix = ''} = {}) {\n    this.cache = {\n      media: {},\n      pseudo: {},\n    };\n    this.prefix = prefix === '' ? false : prefix;\n    this.uniqueCount = 0;\n    this.offset = 10; // skip 0-9\n    this.msb = 35;\n    this.power = 1;\n  }\n\n  static assignDecl(target, decl, className) {\n    const {block, media, pseudo} = decl;\n    let targetEntry;\n    if (media) {\n      if (!target.media[media]) {\n        target.media[media] = {pseudo: {}};\n      }\n      targetEntry = target.media[media];\n    } else {\n      targetEntry = target;\n    }\n    if (pseudo) {\n      if (!targetEntry.pseudo[pseudo]) {\n        targetEntry.pseudo[pseudo] = {};\n      }\n      targetEntry = targetEntry.pseudo[pseudo];\n    }\n    targetEntry[block] = className;\n  }\n\n  /**\n   * Injects a declaration (if not already injected) and returns a class name\n   * @param  {object} decl          The CSS declaration object\n   * @param  {string} decl.prop     The property name\n   * @param  {string} decl.val      The property value\n   * @param  {string} [decl.media]  The media query\n   * @param  {string} [decl.pseudo] The pseudo selector\n   * @return {string|undefined}     The class name for the declaration\n   */\n  injectDeclaration({prop, val, media, pseudo}) {\n    return this.injectRawDeclaration({block: `${prop}:${val}`, media, pseudo});\n  }\n\n  /**\n   * Injects a raw declaration (if not already injected) and returns a class name\n   * @param  {object} decl          The CSS declaration object\n   * @param  {string} decl.block    The declaration block\n   * @param  {string} [decl.media]  The media query\n   * @param  {string} [decl.pseudo] The pseudo selector\n   * @return {string|undefined}     The class name for the declaration\n   */\n  injectRawDeclaration(decl) {\n    const cached = this.getCachedDeclaration(decl);\n    if (cached) {\n      return cached;\n    }\n    const virtualCount = this.incrementVirtualCount();\n    const hash = virtualCount.toString(36);\n    const className = this.prefix ? this.prefix + hash : hash;\n    StyletronCore.assignDecl(this.cache, decl, className);\n    return className;\n  }\n\n  /**\n   * Get the next virtual class number, while setting\n   * the uniqueCount, offset, and msb counters appropriately.\n   * @return {number} The virtual class count\n   * @private\n   */\n  incrementVirtualCount() {\n    const virtualCount = this.uniqueCount + this.offset;\n    if (virtualCount === this.msb) {\n      this.offset += (this.msb + 1) * 9;\n      this.msb = Math.pow(36, ++this.power) - 1;\n    }\n    this.uniqueCount++;\n    return virtualCount;\n  }\n\n  /**\n   * Gets the class name for an already injected declaration\n   * @param  {object} decl          The CSS declaration object\n   * @param  {string} decl.block    The declaration block\n   * @param  {string} [decl.media]  The media query\n   * @param  {string} [decl.pseudo] The pseudo selector\n   * @return {string|undefined}     The class name for the declaration\n   * @private\n   */\n  getCachedDeclaration({block, media, pseudo}) {\n    let entry;\n    if (media) {\n      entry = this.cache.media[media];\n      if (!entry) {\n        return false;\n      }\n    } else {\n      entry = this.cache;\n    }\n    if (pseudo) {\n      entry = entry.pseudo[pseudo];\n      if (!entry) {\n        return false;\n      }\n    }\n    return entry[block];\n  }\n}\n\nexport default StyletronCore;\n"],"names":["StyletronCore","prefix","cache","uniqueCount","offset","msb","power","assignDecl","target","decl","className","block","media","pseudo","targetEntry","injectDeclaration","prop","val","injectRawDeclaration","cached","getCachedDeclaration","virtualCount","incrementVirtualCount","hash","toString","Math","pow","entry"],"mappings":"AAAA;;;;IAIMA;;;;;;;;gCAM4B;kCAAJ,EAAI;2BAAnBC,MAAmB;QAAnBA,MAAmB,4BAAV,EAAU;;SACzBC,KAAL,GAAa;aACJ,EADI;cAEH;KAFV;SAIKD,MAAL,GAAcA,WAAW,EAAX,GAAgB,KAAhB,GAAwBA,MAAtC;SACKE,WAAL,GAAmB,CAAnB;SACKC,MAAL,GAAc,EAAd,CAP8B;;SAQzBC,GAAL,GAAW,EAAX;SACKC,KAAL,GAAa,CAAb;;;gBAGKC,iCAAWC,QAAQC,MAAMC,WAAW;QAClCC,KADkC,GACVF,IADU,CAClCE,KADkC;QAC3BC,KAD2B,GACVH,IADU,CAC3BG,KAD2B;QACpBC,MADoB,GACVJ,IADU,CACpBI,MADoB;QAErCC,WAAJ;;QACIF,KAAJ,EAAW;UACL,CAACJ,OAAOI,KAAP,CAAaA,KAAb,CAAL,EAA0B;eACjBA,KAAP,CAAaA,KAAb,IAAsB;kBAAS;SAA/B;;;oBAEYJ,OAAOI,KAAP,CAAaA,KAAb,CAAd;KAJF,MAKO;oBACSJ,MAAd;;;QAEEK,MAAJ,EAAY;UACN,CAACC,YAAYD,MAAZ,CAAmBA,MAAnB,CAAL,EAAiC;oBACnBA,MAAZ,CAAmBA,MAAnB,IAA6B,EAA7B;;;oBAEYC,YAAYD,MAAZ,CAAmBA,MAAnB,CAAd;;;gBAEUF,KAAZ,IAAqBD,SAArB;;;;;;;;;;;;;;;SAYFK,sDAA8C;QAA3BC,IAA2B,SAA3BA,IAA2B;QAArBC,GAAqB,SAArBA,GAAqB;QAAhBL,KAAgB,SAAhBA,KAAgB;QAATC,MAAS,SAATA,MAAS;WACrC,KAAKK,oBAAL,CAA0B;aAAWF,IAAV,SAAkBC,GAAnB;kBAAA;;KAA1B,CAAP;;;;;;;;;;;;SAWFC,qDAAqBT,MAAM;QACnBU,SAAS,KAAKC,oBAAL,CAA0BX,IAA1B,CAAf;;QACIU,MAAJ,EAAY;aACHA,MAAP;;;QAEIE,eAAe,KAAKC,qBAAL,EAArB;QACMC,OAAOF,aAAaG,QAAb,CAAsB,EAAtB,CAAb;QACMd,YAAY,KAAKT,MAAL,GAAc,KAAKA,MAAL,GAAcsB,IAA5B,GAAmCA,IAArD;kBACchB,UAAd,CAAyB,KAAKL,KAA9B,EAAqCO,IAArC,EAA2CC,SAA3C;WACOA,SAAP;;;;;;;;;;SASFY,yDAAwB;QAChBD,eAAe,KAAKlB,WAAL,GAAmB,KAAKC,MAA7C;;QACIiB,iBAAiB,KAAKhB,GAA1B,EAA+B;WACxBD,MAAL,IAAe,CAAC,KAAKC,GAAL,GAAW,CAAZ,IAAiB,CAAhC;WACKA,GAAL,GAAWoB,KAAKC,GAAL,CAAS,EAAT,EAAa,EAAE,KAAKpB,KAApB,IAA6B,CAAxC;;;SAEGH,WAAL;WACOkB,YAAP;;;;;;;;;;;;;SAYFD,4DAA6C;QAAvBT,KAAuB,SAAvBA,KAAuB;QAAhBC,KAAgB,SAAhBA,KAAgB;QAATC,MAAS,SAATA,MAAS;QACvCc,KAAJ;;QACIf,KAAJ,EAAW;cACD,KAAKV,KAAL,CAAWU,KAAX,CAAiBA,KAAjB,CAAR;;UACI,CAACe,KAAL,EAAY;eACH,KAAP;;KAHJ,MAKO;cACG,KAAKzB,KAAb;;;QAEEW,MAAJ,EAAY;cACFc,MAAMd,MAAN,CAAaA,MAAb,CAAR;;UACI,CAACc,KAAL,EAAY;eACH,KAAP;;;;WAGGA,MAAMhB,KAAN,CAAP;;;;;;;;"}