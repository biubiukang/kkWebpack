import StyletronCore from 'styletron-core';

function baseHandler$1(key, objOrClassName) {
  return key === 'pseudo' ? pseudoObjToCss(objOrClassName) : declToCss(key, objOrClassName);
}

function pseudoObjToCss(pseudoObj) {
  var css = '';

  for (var pseudoClass in pseudoObj) {
    var propsObj = pseudoObj[pseudoClass];

    for (var block in propsObj) {
      css += declToCss(block, propsObj[block], pseudoClass);
    }
  }

  return css;
}

function declToCss(block, className, pseudo) {
  var selector = pseudo ? "" + className + pseudo : className;
  return "." + selector + "{" + block + "}";
}

/*
 * Converts cache object to a CSS string
 * @param  {object} cacheObj Cache object
 * @return {string}          String of CSS
 */

function cacheObjToCss(cacheObj) {
  var mediaCss = '';
  var css = '';

  for (var key in cacheObj) {
    if (key === 'media') {
      mediaCss += mediaObjToCss(cacheObj[key]);
      continue;
    }

    css += baseHandler$1(key, cacheObj[key]);
  }

  return css + mediaCss;
}

function mediaObjToCss(mediaObj) {
  var css = '';

  for (var query in mediaObj) {
    var obj = mediaObj[query];
    var mediaCss = '';

    for (var key in obj) {
      mediaCss += baseHandler$1(key, obj[key]);
    }

    css += "@media " + query + "{" + mediaCss + "}";
  }

  return css;
}

/*
 * Converts cache object to a CSS string
 * @param  {object} cacheObj Cache object
 * @return {string}          String of CSS
 */

function cacheToStylesheets$1(cacheObj) {
  var mediaSheets;
  var mainCss = '';

  for (var key in cacheObj) {
    if (key === 'media') {
      mediaSheets = getMediaSheets(cacheObj[key]);
      continue;
    }

    mainCss += baseHandler$1(key, cacheObj[key]);
  }

  var mainSheet = {
    css: mainCss
  };
  return mediaSheets ? [mainSheet].concat(mediaSheets) : [mainSheet];
}

function getMediaSheets(mediaObj) {
  var stylesheets = [];

  for (var query in mediaObj) {
    var obj = mediaObj[query];
    var mediaCss = '';

    for (var key in obj) {
      mediaCss += baseHandler$1(key, obj[key]);
    }

    stylesheets.push({
      media: query,
      css: mediaCss
    });
  }

  return stylesheets;
}

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var IE9_RULE_LIMIT = 4095;
/*
 * Converts cache object to a CSS string
 * @param  {object} cacheObj Cache object
 * @return {string}          String of CSS
 */

function cacheToStylesheetsOldIE$1(cacheObj) {
  var sheets = [];
  var mediaSheets;
  var mainCss = '';
  var ruleCount = 0;

  for (var key in cacheObj) {
    if (key === 'media') {
      mediaSheets = getMediaSheets$1(cacheObj[key]);
      continue;
    }

    if (_typeof(cacheObj[key]) === 'object') {
      ruleCount += Object.keys(cacheObj[key]).length;
    } else {
      ruleCount++;
    }

    mainCss += baseHandler$1(key, cacheObj[key]); // TODO: handle case of than 4095 unique values for a single property

    if (ruleCount > IE9_RULE_LIMIT && mainCss) {
      sheets.push({
        css: mainCss
      });
      mainCss = '';
      ruleCount = 0;
    }
  }

  if (mainCss) {
    sheets.push({
      css: mainCss
    });
  }

  return mediaSheets ? sheets.concat(mediaSheets) : sheets;
}

function getMediaSheets$1(mediaObj) {
  var stylesheets = [];

  for (var query in mediaObj) {
    var obj = mediaObj[query];
    var mediaCss = '';
    var ruleCount = 0;

    for (var key in obj) {
      if (_typeof(obj[key]) === 'object') {
        ruleCount += Object.keys(obj[key]).length;
      } else {
        ruleCount++;
      }

      mediaCss += baseHandler$1(key, obj[key]); // TODO: handle case of than 4095 unique values for a single property

      if (ruleCount > IE9_RULE_LIMIT && mediaCss) {
        stylesheets.push({
          media: query,
          css: mediaCss
        });
        mediaCss = '';
        ruleCount = 0;
      }
    }

    if (mediaCss) {
      stylesheets.push({
        media: query,
        css: mediaCss
      });
    }
  }

  return stylesheets;
}

function generateHtmlString$1(sheets, className) {
  var html = '';

  for (var i = 0; i < sheets.length; i++) {
    var sheet = sheets[i];
    var classAttr = className ? " class=\"" + className + "\"" : '';
    var mediaAttr = sheet.media ? " media=\"" + sheet.media + "\"" : '';
    html += "<style" + classAttr + mediaAttr + ">" + sheet.css + "</style>";
  }

  return html;
}

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/**
 * A Styletron class for extracting styles during server-side rendering
 * @packagename styletron-server
 * @extends StyletronCore
 */

var StyletronServer =
/*#__PURE__*/
function (_StyletronCore) {
  _inheritsLoose(StyletronServer, _StyletronCore);

  /**
   * Create a new StyletronServer instance
   */
  function StyletronServer(opts) {
    return _StyletronCore.call(this, opts) || this;
  }
  /**
   * Get an array of stylesheet objects
   * @return {Array} Array of stylesheet objects
   * @example
   * const styletron = new StyletronServer();
   *
   * styletron.injectDeclaration({prop: 'color', val: 'red'});
   * // → 'a'
   * styletron.getStylesheets();
   * // → [{css: '.a{color:red}'}]
   */


  var _proto = StyletronServer.prototype;

  _proto.getStylesheets = function getStylesheets() {
    return cacheToStylesheets$1(this.cache);
  };
  /**
   * Get an array of stylesheet objects, with ≤IE9 limit of max 4095 rules per stylesheet
   * @return {Array} Array of stylesheet objects
   * @example
   * const styletron = new StyletronServer();
   *
   * styletron.injectDeclaration({prop: 'color', val: 'red'});
   * // → 'a'
   * styletron.getStylesheetsOldIE();
   * // → [{css: '.a{color:red}'}]
   */


  _proto.getStylesheetsOldIE = function getStylesheetsOldIE() {
    return cacheToStylesheetsOldIE$1(this.cache);
  };
  /**
   * Get a string of style elements for server rendering
   * @return {String} The string of HTML
   * @param {String} className=_styletron_hydrate_ Class name for style elements
   * @example
   * const styletron = new StyletronServer();
   * styletron.injectDeclaration({prop: 'color', val: 'red'});
   * // → 'a'
   * styletron.getStylesheetsHtml();
   * // → '<style class="_styletron_hydrate_">.a{color:red}</style>'
   * styletron.getStylesheetsHtml('custom_class');
   * // → '<style class="custom_class">.a{color:red}</style>'
   */


  _proto.getStylesheetsHtml = function getStylesheetsHtml(className) {
    if (className === void 0) {
      className = '_styletron_hydrate_';
    }

    return generateHtmlString$1(this.getStylesheets(), className);
  };
  /**
   * Get a string of style elements for server rendering, with ≤IE9 limit of max 4095 rules per sheet
   * @return {String} The string of HTML
   * @param {String} className=_styletron_hydrate_ Class name for style elements
   * @example
   * const styletron = new StyletronServer();
   * styletron.injectDeclaration({prop: 'color', val: 'red'});
   * // → 'a'
   * styletron.getStylesheetsHtml();
   * // → '<style class="_styletron_hydrate_">.a{color:red}</style>'
   * styletron.getStylesheetsHtml('custom_class');
   * // → '<style class="custom_class">.a{color:red}</style>'
   */


  _proto.getStylesheetsHtmlOldIE = function getStylesheetsHtmlOldIE(className) {
    if (className === void 0) {
      className = '_styletron_hydrate_';
    }

    return generateHtmlString$1(this.getStylesheetsOldIE(), className);
  };
  /**
   * Get the CSS string. For hydrating styles on the client,
   * [`getStylesheetsHtml`]{@link StyletronServer#getStylesheetsHtml} or [`getStylesheets`]{@link StyletronServer#getStylesheets} should be used instead.
   * @return {String} The string of CSS
   * @example
   * const styletron = new StyletronServer();
   *
   * styletron.injectDeclaration({prop: 'color', val: 'red'});
   * // → 'a'
   * styletron.getCss();
   * // → '.a{color:red}'
   */


  _proto.getCss = function getCss() {
    return cacheObjToCss(this.cache);
  };

  return StyletronServer;
}(StyletronCore);

export default StyletronServer;
//# sourceMappingURL=browser.es5.es.js.map
