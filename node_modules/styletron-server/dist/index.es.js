import StyletronCore from 'styletron-core';

function baseHandler$1(key, objOrClassName) {
  return key === 'pseudo' ? pseudoObjToCss(objOrClassName) : declToCss(key, objOrClassName);
}

function pseudoObjToCss(pseudoObj) {
  let css = '';

  for (const pseudoClass in pseudoObj) {
    const propsObj = pseudoObj[pseudoClass];

    for (const block in propsObj) {
      css += declToCss(block, propsObj[block], pseudoClass);
    }
  }

  return css;
}

function declToCss(block, className, pseudo) {
  const selector = pseudo ? `${className}${pseudo}` : className;
  return `.${selector}{${block}}`;
}

/*
 * Converts cache object to a CSS string
 * @param  {object} cacheObj Cache object
 * @return {string}          String of CSS
 */

function cacheObjToCss(cacheObj) {
  let mediaCss = '';
  let css = '';

  for (const key in cacheObj) {
    if (key === 'media') {
      mediaCss += mediaObjToCss(cacheObj[key]);
      continue;
    }

    css += baseHandler$1(key, cacheObj[key]);
  }

  return css + mediaCss;
}

function mediaObjToCss(mediaObj) {
  let css = '';

  for (const query in mediaObj) {
    const obj = mediaObj[query];
    let mediaCss = '';

    for (const key in obj) {
      mediaCss += baseHandler$1(key, obj[key]);
    }

    css += `@media ${query}{${mediaCss}}`;
  }

  return css;
}

/*
 * Converts cache object to a CSS string
 * @param  {object} cacheObj Cache object
 * @return {string}          String of CSS
 */

function cacheToStylesheets$1(cacheObj) {
  let mediaSheets;
  let mainCss = '';

  for (const key in cacheObj) {
    if (key === 'media') {
      mediaSheets = getMediaSheets(cacheObj[key]);
      continue;
    }

    mainCss += baseHandler$1(key, cacheObj[key]);
  }

  const mainSheet = {
    css: mainCss
  };
  return mediaSheets ? [mainSheet].concat(mediaSheets) : [mainSheet];
}

function getMediaSheets(mediaObj) {
  const stylesheets = [];

  for (const query in mediaObj) {
    const obj = mediaObj[query];
    let mediaCss = '';

    for (const key in obj) {
      mediaCss += baseHandler$1(key, obj[key]);
    }

    stylesheets.push({
      media: query,
      css: mediaCss
    });
  }

  return stylesheets;
}

const IE9_RULE_LIMIT = 4095;
/*
 * Converts cache object to a CSS string
 * @param  {object} cacheObj Cache object
 * @return {string}          String of CSS
 */

function cacheToStylesheetsOldIE$1(cacheObj) {
  const sheets = [];
  let mediaSheets;
  let mainCss = '';
  let ruleCount = 0;

  for (const key in cacheObj) {
    if (key === 'media') {
      mediaSheets = getMediaSheets$1(cacheObj[key]);
      continue;
    }

    if (typeof cacheObj[key] === 'object') {
      ruleCount += Object.keys(cacheObj[key]).length;
    } else {
      ruleCount++;
    }

    mainCss += baseHandler$1(key, cacheObj[key]); // TODO: handle case of than 4095 unique values for a single property

    if (ruleCount > IE9_RULE_LIMIT && mainCss) {
      sheets.push({
        css: mainCss
      });
      mainCss = '';
      ruleCount = 0;
    }
  }

  if (mainCss) {
    sheets.push({
      css: mainCss
    });
  }

  return mediaSheets ? sheets.concat(mediaSheets) : sheets;
}

function getMediaSheets$1(mediaObj) {
  const stylesheets = [];

  for (const query in mediaObj) {
    const obj = mediaObj[query];
    let mediaCss = '';
    let ruleCount = 0;

    for (const key in obj) {
      if (typeof obj[key] === 'object') {
        ruleCount += Object.keys(obj[key]).length;
      } else {
        ruleCount++;
      }

      mediaCss += baseHandler$1(key, obj[key]); // TODO: handle case of than 4095 unique values for a single property

      if (ruleCount > IE9_RULE_LIMIT && mediaCss) {
        stylesheets.push({
          media: query,
          css: mediaCss
        });
        mediaCss = '';
        ruleCount = 0;
      }
    }

    if (mediaCss) {
      stylesheets.push({
        media: query,
        css: mediaCss
      });
    }
  }

  return stylesheets;
}

function generateHtmlString$1(sheets, className) {
  let html = '';

  for (let i = 0; i < sheets.length; i++) {
    const sheet = sheets[i];
    const classAttr = className ? ` class="${className}"` : '';
    const mediaAttr = sheet.media ? ` media="${sheet.media}"` : '';
    html += `<style${classAttr}${mediaAttr}>${sheet.css}</style>`;
  }

  return html;
}

/**
 * A Styletron class for extracting styles during server-side rendering
 * @packagename styletron-server
 * @extends StyletronCore
 */

class StyletronServer extends StyletronCore {
  /**
   * Create a new StyletronServer instance
   */
  constructor(opts) {
    super(opts);
  }
  /**
   * Get an array of stylesheet objects
   * @return {Array} Array of stylesheet objects
   * @example
   * const styletron = new StyletronServer();
   *
   * styletron.injectDeclaration({prop: 'color', val: 'red'});
   * // → 'a'
   * styletron.getStylesheets();
   * // → [{css: '.a{color:red}'}]
   */


  getStylesheets() {
    return cacheToStylesheets$1(this.cache);
  }
  /**
   * Get an array of stylesheet objects, with ≤IE9 limit of max 4095 rules per stylesheet
   * @return {Array} Array of stylesheet objects
   * @example
   * const styletron = new StyletronServer();
   *
   * styletron.injectDeclaration({prop: 'color', val: 'red'});
   * // → 'a'
   * styletron.getStylesheetsOldIE();
   * // → [{css: '.a{color:red}'}]
   */


  getStylesheetsOldIE() {
    return cacheToStylesheetsOldIE$1(this.cache);
  }
  /**
   * Get a string of style elements for server rendering
   * @return {String} The string of HTML
   * @param {String} className=_styletron_hydrate_ Class name for style elements
   * @example
   * const styletron = new StyletronServer();
   * styletron.injectDeclaration({prop: 'color', val: 'red'});
   * // → 'a'
   * styletron.getStylesheetsHtml();
   * // → '<style class="_styletron_hydrate_">.a{color:red}</style>'
   * styletron.getStylesheetsHtml('custom_class');
   * // → '<style class="custom_class">.a{color:red}</style>'
   */


  getStylesheetsHtml(className = '_styletron_hydrate_') {
    return generateHtmlString$1(this.getStylesheets(), className);
  }
  /**
   * Get a string of style elements for server rendering, with ≤IE9 limit of max 4095 rules per sheet
   * @return {String} The string of HTML
   * @param {String} className=_styletron_hydrate_ Class name for style elements
   * @example
   * const styletron = new StyletronServer();
   * styletron.injectDeclaration({prop: 'color', val: 'red'});
   * // → 'a'
   * styletron.getStylesheetsHtml();
   * // → '<style class="_styletron_hydrate_">.a{color:red}</style>'
   * styletron.getStylesheetsHtml('custom_class');
   * // → '<style class="custom_class">.a{color:red}</style>'
   */


  getStylesheetsHtmlOldIE(className = '_styletron_hydrate_') {
    return generateHtmlString$1(this.getStylesheetsOldIE(), className);
  }
  /**
   * Get the CSS string. For hydrating styles on the client,
   * [`getStylesheetsHtml`]{@link StyletronServer#getStylesheetsHtml} or [`getStylesheets`]{@link StyletronServer#getStylesheets} should be used instead.
   * @return {String} The string of CSS
   * @example
   * const styletron = new StyletronServer();
   *
   * styletron.injectDeclaration({prop: 'color', val: 'red'});
   * // → 'a'
   * styletron.getCss();
   * // → '.a{color:red}'
   */


  getCss() {
    return cacheObjToCss(this.cache);
  }

}

export default StyletronServer;
//# sourceMappingURL=index.es.js.map
